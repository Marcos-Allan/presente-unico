/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.3 public/models/mug.glb -o src/components/Mug.jsx -r public
*/

import { Decal, useGLTF, useTexture } from "@react-three/drei";
import { useControls } from "leva";
import { useState } from "react";
import { degToRad } from "three/src/math/MathUtils.js";
import { Vector3, Euler } from "three";

// Mugs by Poly by Google [CC-BY] (https://creativecommons.org/licenses/by/3.0/) via Poly Pizza (https://poly.pizza/m/8cBJ9XWbkiv)
export function Mug(props: any) {
  const texture = useTexture("https://pngfre.com/wp-content/uploads/anime-poster.png");
  const { nodes, materials } = useGLTF("/mug.glb") as any;

  const [pos, setPos] = useState<Vector3>(new Vector3(0, 1.8, 1));
  const [rotation, setRotation] = useState<Euler>(new Euler(0, 0, 0));
  const [scale, setScale] = useState<Vector3>(new Vector3(1.5, 1.5, 1.5));

  useControls({
    angle: {
      min: degToRad(60),
      max: degToRad(300),
      value: Math.PI / 4,
      step: 0.01,
      onChange: (value) => {
        const x = Math.cos(value);
        const z = Math.sin(value);
        const rot = Math.atan2(x, z);
        setRotation(new Euler(0, rot, 0));
        setPos(new Vector3(x, pos.y, z));
      },
    },
    posY: {
      min: 0,
      max: 3,
      value: 1.8,
      step: 0.01,
      onChange: (value) => {
        setPos(new Vector3(pos.x, value, pos.z));
      },
    },
    scale: {
      min: 0.5,
      max: 3,
      value: 1.5,
      step: 0.01,
      onChange: (value) => {
        setScale(new Vector3(value, value, 1.5));
      },
    },
  });

  return (
    <group {...props} dispose={null}>
      {nodes.Arc001_1 && (
        <mesh geometry={nodes.Arc001_1.geometry} material={materials["01___Default-2"]} />
      )}
      {nodes.Arc001_1_1 && (
        <mesh geometry={nodes.Arc001_1_1.geometry} material={materials["02___Default-2"]} />
      )}
      {nodes.Arc001_1_2 && (
        <mesh geometry={nodes.Arc001_1_2.geometry} material={materials["02___Default"]} />
      )}
      {nodes.Arc001_1_3 && (
        <mesh geometry={nodes.Arc001_1_3.geometry} material={materials["01___Default"]} />
      )}
      {nodes.Arc001_1_4 && (
        <mesh geometry={nodes.Arc001_1_4.geometry}>
          <meshBasicMaterial transparent opacity={0} />
          <Decal position={pos} rotation={rotation} scale={scale}>
            <meshStandardMaterial
              map={texture}
              toneMapped={false}
              transparent
              polygonOffset
              polygonOffsetFactor={-1}
            />
          </Decal>
        </mesh>
      )}
    </group>
  );
}

useGLTF.preload("/mug.glb");
